/*
 * Metodología de la Programación: Language3
 * Curso 2022/2023
 */

#include <iostream>
#include "../include/Language.h"
#include <string>
using namespace  std;
/*
 * File:   main.cpp
 * @author Silvia Acid Carrillo <acid@decsai.ugr.es>
 * @author Andrés Cano Utrera <acu@decsai.ugr.es>
 * @author Luis Castillo Vidal <L.Castillo@decsai.ugr.es>
 *
 * Created on 7 de febrero de 2023, 14:02
 */

/**
 * @author Florin Emanuel Todor
 */

/**
 * Shows help about the use of this program in the given output stream
 * @param outputStream The output stream where the help will be shown (for example,
 * cout, cerr, etc)
 */
void showEnglishHelp(ostream& outputStream) {
    outputStream << "Error, run with the following parameters:" << endl;
    outputStream << "language3 [-t min|max] <file1.bgr> <file2.bgr> [ ... <filen.bgr>]" << endl;
}

/**
 * This program reads an undefined number of Language objects from the set of
 * files passed as parameters to main(). All the Languages object, except the
 * first one, must be stored in a dynamic array of Language objects. Then,
 * for each Language in the dynamic array, this program prints to the
 * standard output the name of the file of that Language and the distance from
 * the first Language to the current Language.
 * Finally, the program should print in the standard output, the name of
 * the file with the Language with the minimum|maximum distance to the Language
 * of the first file and its language identifier.
 *
 * At least, two Language files are required to run this program.
 * Running example:
 * > language3 [-t min|max] <file1.bgr> <file2.bgr> [  ... <filen.bgr>]
 */

int main(int argc, char* argv[]) {
    if (argc < 3) {
        showEnglishHelp(cout);
        return 1;
    }
    //Comprobar si se ha pasado -t y que tipo de búsqueda se va a usar
    bool max=false;
    bool min=false;

    if(argv[3]== string("-t")) {
        if (argv[4] == string("min")) {
            min = true;
        }
        if (argv[4] == string("max")) {
            max = true;
        }

        Language *languages = new Language[argc - 3];
        for (int i = 5; i < argc; ++i) {
            languages[i].load(argv[i]);
        }

        cout << "Calculo de distancias" << endl;
        for (int i = 1; i < languages->getSize(); ++i) {
            cout << "Distance to " << argv[i] << ": " << languages[0].getDistance(languages[i]);

        }
    }
    else { //En el caso de que se pase alguna letra que no sea -t
        if (string(argv[3]).find_first_not_of("-""abcdefghijklmnopqrsuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ") ==
            std::string::npos) {
            showEnglishHelp(cerr);
        }
    }


    //En el caso de que no se haya pasado ningún parametro, se buscará por defecto por min
    if (!min || !max){
    min = true;
    Language* languages = new Language[argc-1];
    for(int i=2; i< argc; ++i){
        languages[i].load(argv[i]);
    }

        cout << "Calculo de distancias" << endl;
        for (int i = 1; i < languages->getSize(); ++i) {
            cout << "Distance to " << argv[i] << ": " << languages[0].getDistance(languages[i]);

        }
    }

}
